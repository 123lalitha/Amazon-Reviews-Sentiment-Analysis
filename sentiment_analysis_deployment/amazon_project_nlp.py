# -*- coding: utf-8 -*-
"""Amazon_Project_NLP.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1H1GTHxuqLC18CEMI-RQyhluu02wCIOCH

# <CENTER> IMPORTING DEPENDENCIES
"""
import pickle
import pandas as pd
import webbrowser
import dash
from dash import html
from dash import dcc
import dash_bootstrap_components as dbc
from matplotlib import pyplot as plt
from dash.dependencies import Input, Output, State
from sklearn.feature_extraction.text import TfidfTransformer
from sklearn.feature_extraction.text import CountVectorizer
import os
from wordcloud import WordCloud, STOPWORDS

import nltk
nltk.download("stopwords")

from nltk.corpus import stopwords
stop = stopwords.words("english")

import pandas as pd
from sklearn.utils import resample
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer

from sklearn.tree import DecisionTreeClassifier
from sklearn.ensemble import RandomForestClassifier, StackingClassifier
from sklearn.neighbors import KNeighborsClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.naive_bayes import MultinomialNB
from sklearn.pipeline import Pipeline
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics import classification_report, f1_score, accuracy_score, precision_score, recall_score
from sklearn.svm import LinearSVC
from sklearn import set_config

set_config(display='diagram')

import matplotlib.pyplot as plt

"""### Connecting to google drive to import files
"""
"""# <center> Reading the files"""


music_sent = pd.read_csv("C:\Users\Admin\Desktop\lalitha\amazon_project_web\music_sent.csv")


music_sent.dropna(inplace = True)

"""# <CENTER> AMAZON REVIEWS ANALYSIS - MUSICAL INSTRUMENTS"""

#SAMPLING THE DATA INTO A BALANCED DATASET

# Separate majority and minority classes
music_pos = music_sent[music_sent['Analysis']=='Positive']
music_neu = music_sent[music_sent['Analysis']=='Neutral']
music_neg = music_sent[music_sent['Analysis']=='Negative']
 

df_music_pos = resample(music_pos, 
                                 replace=False,    
                                 n_samples=35000)

df_music_neu = resample(music_neu, 
                                 replace=True,     
                                 n_samples=35000)

df_music_neg = resample(music_neg, 
                        replace=True, n_samples=35000)

# Combine minority class with downsampled majority class
music_df = pd.concat([df_music_pos, df_music_neu,df_music_neg])

"""# <center> SPLITING THE DATASET INTO TRAIN AND TEST"""

X = music_df["preprocessed"]
y = music_df["Analysis"]

X_train, X_test, y_train, y_test = train_test_split(X,y,test_size = 0.2,random_state = 42)



"""# <center> Pipeline Model"""

f1_list = []
recall_list = []
precision_list = []
train_accuracy_list = []
test_accuracy_list = []

def f1_score1(precision,recall):
  f1 = 2*(precision * recall)/(precision + recall)
  return f1

def evaluation(pipeline):
  pipeline = pipeline.fit(X_train, y_train)
  global accuracy_train, accuracy_test, precision1, recall1, f1_score, y_pred_test, y_pred_train
  
  y_pred_train = pipeline.predict(X_train)
  y_pred_test = pipeline.predict(X_test)

  accuracy_train=accuracy_score(y_train, y_pred_train)
  accuracy_test=accuracy_score(y_test, y_pred_test)
  precision1 = precision_score(y_test, y_pred_test,average="weighted")
  recall1 = recall_score(y_test, y_pred_test,average="weighted")
  f1_score2 = f1_score1(precision1, recall1)

  print('Accuracy on train %f' %accuracy_train)
  print('Accuracy on test %f' %accuracy_test)
  print("F1 Score", f1_score2)
  print("Precision Score", precision1)
  print("Recall Score", recall1)

  f1_list.append(f1_score2)
  precision_list.append(precision1)
  recall_list.append(recall1)
  train_accuracy_list.append(accuracy_train)
  test_accuracy_list.append(accuracy_test)




"""#<CENTER> FINAL MODEL FOR MUSIC DATASET"""

pipeline_lr_cv = Pipeline([
    ('vect', CountVectorizer(analyzer='word', ngram_range=(1, 2))),
    ('clf', LogisticRegression(random_state=40,multi_class="ovr",C=8,penalty="l2",solver="newton-cg",max_iter=500)),
])

evaluation(pipeline_lr_cv)

def customer_review(pipeline):
  review = input('Enter your review:')
  result = pipeline.predict([str(review)])
  if result == 'Positive':
    print('\033[1;32mThis review is Positive\033[0m')
  elif result == 'Neutral':
    print('\033[1;33mThis review is Neutral\033[0m')
  else:
    print('\033[1;31mThis review is Negative\033[0m')
  

customer_review(pipeline_lr_cv)

# Calling the main function
if __name__ == "__main__":
    main()



